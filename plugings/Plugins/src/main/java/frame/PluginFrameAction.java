package frame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JTextArea;

import plugin.Plugin;
/**
 * Class PluginFrameAction
 * 
 * @author Enasoae Simona, Marcel Fernandez de la Pena
 *
 */
public class PluginFrameAction implements ActionListener {
	//ATTRIBUTES
	/**
	 * frame's textArea
	 */
	public JTextArea textArea;
	/**
	 * the plugin that has been added
	 */
	public Plugin plugin;
	
	//CONSTRUCTOR 
	/**
	 * 
	 * @param plugin is the Plugin in the actual menu
	 * @param textArea is the frame's textArea
	 */
	public PluginFrameAction(JTextArea textArea,Plugin plugin){
			this.textArea = textArea;
			this.plugin = plugin;
	}
	 
	/**
	 * Action performed when PluginFrameAction is invoked. 
	 * The method gets the textArea text
	 * gets the transform method and it's applied 
	 * the to the text
	 * 
	 * @param e A semantic event which indicates that a component-defined action occurred.
	 * This high-level event is generated by a component (such as a Button) when the component-specific action occurs (such as being pressed). 
	 * The event is passed to every ActionListener object that registered to receive such events using the component's addActionListener method.
	 */
	public void actionPerformed(ActionEvent e) {
		 
		 String text = textArea.getText();
		 String resultText = plugin.transform(text);
		 textArea.setText(resultText);
		 textArea.setCaretPosition(textArea.getDocument().getLength());
		 textArea.setVisible(true);
   	
     }    
}

